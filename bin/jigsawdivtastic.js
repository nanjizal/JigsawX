// Generated by Haxe 3.4.7
(function ($global) { "use strict";
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,last: function() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = true;
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std["is"] = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.instance = function(value,c) {
	if((value instanceof c)) {
		return value;
	} else {
		return null;
	}
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var core_DisplayDiv = function(img) {
	if(this.isVideo(img)) {
		this._vid = core_GlobalDiv.ROOT(this).createElement("video");
		this._dom = this._vid;
	} else if(img == "canvas") {
		this._dom = core_GlobalDiv.ROOT(this).createElement("canvas");
	} else {
		this._dom = core_GlobalDiv.ROOT(this).createElement("div");
	}
	this._style = this._dom.style;
	this.isIE = core_WebBrowser.get_browserType() == core_BrowserType.IE;
	this.out = new zpartanlite_DispatchTo();
	this.out.tellEnabled = $bind(this,this.outEnabled);
	this.out.tellDisabled = $bind(this,this.outDisabled);
	this.over = new zpartanlite_DispatchTo();
	this.over.tellEnabled = $bind(this,this.overEnabled);
	this.over.tellDisabled = $bind(this,this.overDisabled);
	this.release = new zpartanlite_DispatchTo();
	this.release.tellEnabled = $bind(this,this.releaseEnabled);
	this.release.tellDisabled = $bind(this,this.releaseDisabled);
	this.press = new zpartanlite_DispatchTo();
	this.press.tellEnabled = $bind(this,this.pressEnabled);
	this.press.tellDisabled = $bind(this,this.pressDisabled);
	this.dragging = new zpartanlite_DispatchTo();
	this.dragInform = false;
	this.draggingParent = new zpartanlite_DispatchTo();
	this.set_tile(false);
	if(img != null) {
		this.set_image(img);
	}
	this._style.position = "absolute";
};
core_DisplayDiv.__name__ = true;
core_DisplayDiv.prototype = {
	getGlobalMouseXY: function() {
		var globalPos = this.getGlobalXY();
		var pos = new List();
		pos.add(globalPos.first() + this._clientX);
		pos.add(globalPos.last() + this._clientY);
		return pos;
	}
	,getGlobalXY: function() {
		var p = this;
		var gX = p.get_x();
		var gY = p.get_y();
		while(p.get_parent() != null) {
			p = p.get_parent();
			gX += p.get_x();
			gY += p.get_y();
		}
		var pos = new List();
		pos.add(gX);
		pos.add(gY);
		return pos;
	}
	,pressEnabled: function() {
		var _gthis = this;
		this._dom.onmousedown = function(e) {
			var em = e;
			_gthis._clientX = em.clientX;
			_gthis._clientY = em.clientY;
			_gthis.press.dispatch();
		};
	}
	,pressDisabled: function() {
		this._dom.onmousedown = null;
	}
	,releaseEnabled: function() {
		var _gthis = this;
		this._dom.onmouseup = function(e) {
			var em = e;
			_gthis._clientX = em.clientX;
			_gthis._clientY = em.clientY;
			_gthis.release.dispatch();
		};
	}
	,releaseDisabled: function() {
		this._dom.onmouseup = null;
	}
	,overEnabled: function() {
		var _gthis = this;
		this._dom.onmouseover = function(e) {
			_gthis.over.dispatch();
		};
	}
	,overDisabled: function() {
		this._dom.onmouseover = null;
	}
	,outEnabled: function() {
		var _gthis = this;
		this._dom.onmouseout = function(e) {
			_gthis.out.dispatch();
		};
	}
	,outDisabled: function() {
		this._dom.onmouseout = null;
	}
	,setupDrag: function() {
		this._style.cursor = "pointer";
		this.press.add($bind(this,this.startDrag));
		this.release.add($bind(this,this.stopDrag));
	}
	,startDrag: function() {
		this.offSetX = this._clientX - this.get_x() | 0;
		this.offSetY = this._clientY - this.get_y() | 0;
		core_GlobalDiv.ROOT(this).onmousemove = $bind(this,this.drag);
	}
	,stopDrag: function() {
		core_GlobalDiv.ROOT(this).onmousemove = null;
	}
	,drag: function(e) {
		if(this.dragInform) {
			this.dragging.dispatch();
		}
		var em = e;
		this.set_x(em.clientX - this.offSetX);
		this.set_y(em.clientY - this.offSetY);
	}
	,setupParentDrag: function() {
		var me = this;
		this._style.cursor = "pointer";
		this.press.add($bind(this,this.parentStartDrag));
		this.release.add($bind(this,this.parentStopDrag));
	}
	,parentStartDrag: function() {
		this.offSetX = this._clientX - this.get_parent().get_x() | 0;
		this.offSetY = this._clientY - this.get_parent().get_y() | 0;
		core_GlobalDiv.ROOT(this).onmousemove = $bind(this,this.parentDrag);
	}
	,parentStopDrag: function() {
		core_GlobalDiv.ROOT(this).onmousemove = null;
	}
	,parentDrag: function(e) {
		if(this.dragInform) {
			this.draggingParent.dispatch();
		}
		var em = e;
		this.get_parent().set_x(em.clientX - this.offSetX);
		this.get_parent().set_y(em.clientY - this.offSetY);
	}
	,play: function() {
		if(this._vid != null) {
			this._vid.play();
		}
	}
	,isVideo: function(img) {
		if(img == null) {
			return false;
		}
		var arr = img.split(".");
		if(arr.length == null) {
			return false;
		}
		var str = arr[1];
		switch(str) {
		case "mov":case "mp4":case "mpeg":case "ogv":case "webm":
			this.videoType = "video/" + str;
			return true;
		}
		return false;
	}
	,set_image: function(img) {
		this._img = img;
		if(this.isIE) {
			this.createImageDivIfNot();
		}
		if(img.split(".").length > 1) {
			if(this.isIE) {
				this.imageDiv.set_image(img);
			} else if(this._vid == null) {
				this._style.backgroundImage = "url(" + img + ")";
			} else {
				this._dom.setAttribute("src",img);
				this._dom.setAttribute("type",this.videoType);
			}
		} else if(this.isIE) {
			this.imageDiv.set_image(img);
		} else {
			this._dom.className = img;
		}
	}
	,setClip: function() {
		this._style.overflow = "Hidden";
	}
	,get_tile: function() {
		if(this._tile == null) {
			this.set_tile(false);
		}
		return this._tile;
	}
	,set_tile: function(tile_) {
		this._tile = tile_;
		if(this.isIE) {
			this.createImageDivIfNot();
		}
		if(this._tile) {
			if(this.isIE) {
				this.imageDiv.set_tile(true);
			} else {
				this._style.backgroundRepeat = "repeat";
			}
		} else if(this.isIE) {
			this.imageDiv.set_tile(false);
		} else {
			this._style.backgroundRepeat = "no-repeat";
		}
		return tile_;
	}
	,createImageDivIfNot: function() {
		if(this.imageDiv == null) {
			this.imageDiv = new core_ImageDiv();
			this.imageDiv.set_x(0);
			this.imageDiv.set_y(0);
			this.addChild2(this.imageDiv);
		}
		this.imageDiv.set_width(this.get_width());
		this.imageDiv.set_height(this.get_height());
		return this.imageDiv;
	}
	,getInstance: function() {
		return this._dom;
	}
	,getStyle: function() {
		return this._style;
	}
	,set_text: function(txt) {
		this._dom.innerHTML = "";
		this.set_width(0);
		this.set_height(0);
		if(this.get_parent() != null) {
			this.get_parent().updateSizeBasedOnChild(this);
		}
		this._dom.innerHTML = txt;
		var _g = core_WebBrowser.get_browserType();
		switch(_g[1]) {
		case 0:case 1:case 2:
			this._style.webkitUserSelect = "none";
			break;
		case 3:
			this._style.MozUserSelect = "none";
			break;
		case 4:case 5:
			this._style.unselectable = "on";
			break;
		}
		this.set_width(this._width);
		this.set_height(this._height);
		if(this.get_parent() != null) {
			this.get_parent().updateSizeBasedOnChild(this);
		}
		return txt;
	}
	,updateText: function(txt) {
		this._dom.innerHTML = "";
		this.set_width(0);
		this.set_height(0);
		this._dom.innerHTML = txt;
		this._style.width = Std.string(this.fixedTextWidth);
		if(this.fixedTextHeight != null) {
			this._style.height = Std.string(this.fixedTextHeight);
		}
		this._style.overflow = "Hidden";
	}
	,get_text: function() {
		return this._dom.innerHTML;
	}
	,set_visible: function(val) {
		if(val) {
			this._style.visibility = "visible";
		} else {
			this._style.visibility = "hidden";
		}
		this.viz = val;
		return this.viz;
	}
	,get_visible: function() {
		if(this.viz == null) {
			this.viz = true;
		}
		return this.viz;
	}
	,set_fill: function(c) {
		if(this.isIE) {
			this.createImageDivIfNot();
			this.imageDiv.set_fill(c);
		} else {
			this._style.backgroundColor = c;
		}
		this._bgColor = c;
		return c;
	}
	,get_fill: function() {
		return this._bgColor;
	}
	,addChild: function(mc) {
		this._dom.appendChild(mc.getInstance());
		mc.set_parent(this);
		this.updateSizeBasedOnChild(mc);
		mc.appended();
		return mc;
	}
	,addChild2: function(mc) {
		this._dom.appendChild(mc.getInstance());
		mc.set_parent(this);
		this.updateSizeBasedOnChild2(mc);
		mc.appended();
		return mc;
	}
	,appended: function() {
	}
	,set_parent: function(mc) {
		this._parent = mc;
		return mc;
	}
	,get_parent: function() {
		return this._parent;
	}
	,updateSizeBasedOnChild2: function(mc) {
		if(this.get_width() < mc.get_width() + mc.get_x()) {
			this.set_width(mc.get_width() + mc.get_x());
		}
		if(this.get_height() < mc.get_height() + mc.get_y()) {
			this.set_height(mc.get_height() + mc.get_y());
		}
	}
	,updateSizeBasedOnChild: function(mc) {
		if(this.get_width() < mc.get_width() + mc.get_x()) {
			this.set_width(mc.get_width() + mc.get_x());
		}
		if(this.get_height() < mc.get_height() + mc.get_y()) {
			this.set_height(mc.get_height() + mc.get_y());
		}
	}
	,set_height: function(val) {
		this._height = val;
		if(this._twoD == null) {
			this._style.paddingTop = val + "px";
		} else {
			this._style.paddingTop = "0px";
		}
		return val;
	}
	,get_height: function() {
		if(this._height == null || this._height < this._dom.clientHeight) {
			this._height = this._dom.clientHeight;
		}
		return this._height;
	}
	,set_width: function(val) {
		this._width = val;
		if(this._twoD == null) {
			this._style.paddingLeft = val + "px";
		} else {
			this._style.paddingLeft = "0px";
		}
		return val;
	}
	,get_width: function() {
		if(this._width == null || this._width < this._dom.clientWidth) {
			this._width = this._dom.clientWidth;
		}
		return this._width;
	}
	,set_y: function(val) {
		this._y = val;
		this._style.top = val + "px";
		return val;
	}
	,get_y: function() {
		return this._y;
	}
	,set_x: function(val) {
		this._x = val;
		this._style.left = val + "px";
		return val;
	}
	,get_x: function() {
		return this._x;
	}
	,get_twoD: function() {
		if(this._canvas == null) {
			this._canvas = this._dom;
		}
		if(this._twoD == null) {
			this._twoD = this._canvas.getContext("2d",null);
		}
		return this._twoD;
	}
	,get_scale: function() {
		if(this._scale == null) {
			this._scale = 1;
			this._scaleX = 1;
			this._scaleY = 1;
		}
		return this._scale;
	}
	,set_scale: function(scale_) {
		var scaleStr = scale_ == null ? "null" : "" + scale_;
		var str = "scale(" + scaleStr + ", " + scaleStr + ")";
		var _g = core_WebBrowser.get_browserType();
		switch(_g[1]) {
		case 0:case 1:case 2:
			this._style.WebkitTransform = str;
			break;
		case 3:
			this._style.MozTransform = str;
			break;
		case 4:
			this._style.OTransform = str;
			break;
		case 5:
			this.affineTrans(scale_,0,0,scale_,0,0);
			break;
		}
		this._scale = scale_;
		this._scaleX = scale_;
		this._scaleY = scale_;
		return this._scale;
	}
	,get_scaleY: function() {
		if(this._scaleY == null) {
			this._scaleY = 1;
		}
		return this._scaleY;
	}
	,set_scaleY: function(scaleY_) {
		var _g = core_WebBrowser.get_browserType();
		switch(_g[1]) {
		case 0:case 1:case 2:
			this._style.WebkitTransform = "scaleY(" + (scaleY_ == null ? "null" : "" + scaleY_) + ")";
			break;
		case 3:
			this._style.MozTransform = "scaleY(" + (scaleY_ == null ? "null" : "" + scaleY_) + ")";
			break;
		case 4:
			this._style.OTransform = "scaleY(" + (scaleY_ == null ? "null" : "" + scaleY_) + ")";
			break;
		case 5:
			this.affineTrans(this.get_scaleX(),0,0,scaleY_,0,0);
			break;
		}
		this._scaleY = scaleY_;
		return this._scaleY;
	}
	,get_scaleX: function() {
		if(this._scaleX == null) {
			this._scaleX = 1;
		}
		return this._scaleX;
	}
	,set_scaleX: function(scaleX_) {
		var _g = core_WebBrowser.get_browserType();
		switch(_g[1]) {
		case 0:case 1:case 2:
			this._style.WebkitTransform = "scaleX(" + (scaleX_ == null ? "null" : "" + scaleX_) + ")";
			break;
		case 3:
			this._style.MozTransform = "scaleX(" + (scaleX_ == null ? "null" : "" + scaleX_) + ")";
			break;
		case 4:
			this._style.OTransform = "scaleX(" + (scaleX_ == null ? "null" : "" + scaleX_) + ")";
			break;
		case 5:
			this.affineTrans(scaleX_,0,0,this.get_scaleY(),0,0);
			break;
		}
		this._scaleX = scaleX_;
		return this._scaleX;
	}
	,affineTrans: function(a,b,c,d,e,f) {
		this.afflines = [a,b,c,d,e,f];
		var mat0 = "matrix( " + (a == null ? "null" : "" + a) + ", " + (b == null ? "null" : "" + b) + ", " + (c == null ? "null" : "" + c) + ", " + (d == null ? "null" : "" + d) + ", ";
		var matrixFirefox = mat0 + (e == null ? "null" : "" + e) + "px, " + (e == null ? "null" : "" + e) + "px ) ";
		var matrixGeneral = mat0 + (e == null ? "null" : "" + e) + (e == null ? "null" : "" + e) + " ) ";
		var _g = core_WebBrowser.get_browserType();
		switch(_g[1]) {
		case 0:case 1:case 2:
			this._style.WebkitTransform = matrixGeneral;
			break;
		case 3:
			this._style.MozTransform = matrixFirefox;
			break;
		case 4:
			this._style.OTransform = matrixGeneral;
			break;
		case 5:
			this.affineTransIE(a,b,c,d,e,f);
			break;
		}
	}
	,affineTransIE: function(a,b,c,d,e,f) {
		this._style.filter = "progid:DXImageTransform.Microsoft.Matrix(M11=" + a + ", M21=" + b + ", M12=" + c + ", M22=" + d + ", SizingMethod=\"auto expand\")";
		var w2 = this.get_width() / 2;
		var h2 = this.get_height() / 2;
		this.set_x(Math.round(this.get_x() + e - (Math.abs(a) - 1) * w2 + Math.abs(c) * h2));
		this.set_y(Math.round(this.get_y() + f - Math.abs(b) * w2 + (Math.abs(d) - 1) * h2));
	}
	,set_rotation: function(angle) {
		this._rotation = angle;
		this._angle = angle | 0;
		var rad = this._rotation * (Math.PI / 180);
		var cos = Math.cos(rad);
		var sin = Math.sin(rad);
		var _g = core_WebBrowser.get_browserType();
		switch(_g[1]) {
		case 0:case 1:case 2:
			this._style.WebkitTransform = "rotate(" + Std.string(this._angle) + "deg)";
			break;
		case 3:
			this._style.MozTransform = "rotate(" + Std.string(this._angle) + "deg)";
			break;
		case 4:
			this._style.OTransform = "rotate(" + Std.string(this._angle) + "deg)";
			break;
		case 5:
			this.affineTrans(cos,-sin,sin,cos,0,0);
			break;
		}
		return angle;
	}
	,get_rotation: function() {
		if(this._rotation == null) {
			this._rotation = 0;
			this._angle = 0;
		}
		return this._rotation;
	}
	,get_alpha: function() {
		if(this._alpha == null) {
			this._alpha = 1;
		}
		return this._alpha;
	}
	,set_alpha: function(alpha_) {
		var _g = core_WebBrowser.get_browserType();
		switch(_g[1]) {
		case 0:case 1:case 2:case 3:case 4:
			this._style.opacity = alpha_;
			break;
		case 5:
			var tmp = "alpha(opacity=" + Std.String(Math.round(alpha_ * 10));
			this._style.filter = tmp + ")";
			break;
		}
		this._alpha = alpha_;
		return this._alpha;
	}
	,__class__: core_DisplayDiv
};
var core_GlobalDiv = function() { };
core_GlobalDiv.__name__ = true;
core_GlobalDiv.ROOT = function(d) {
	return core_GlobalDiv._root;
};
core_GlobalDiv.addChild = function(d,mc) {
	core_GlobalDiv._root.body.appendChild(mc.getInstance());
};
var core_ImageDiv = function(img) {
	console.log("imageDiv");
	this._dom = core_GlobalDiv.ROOT(this).createElement("div");
	this._style = this._dom.style;
	this.set_tile(false);
	if(img != null) {
		this.set_image(img);
	}
	this._style.position = "absolute";
	this._d = 0;
};
core_ImageDiv.__name__ = true;
core_ImageDiv.prototype = {
	set_image: function(img) {
		this._img = img;
		if(img.split(".").length > 1) {
			this._style.backgroundImage = "url(" + img + ")";
		} else {
			this._dom.className = img;
		}
	}
	,appended: function() {
	}
	,setClip: function() {
		this._style.overflow = "Hidden";
	}
	,get_tile: function() {
		if(this._tile == null) {
			this.set_tile(false);
		}
		return this._tile;
	}
	,set_tile: function(tile_) {
		this._tile = tile_;
		if(this._tile) {
			this._style.backgroundRepeat = "repeat";
		} else {
			this._style.backgroundRepeat = "no-repeat";
		}
		return tile_;
	}
	,getInstance: function() {
		return this._dom;
	}
	,getStyle: function() {
		return this._style;
	}
	,set_visible: function(val) {
		if(val) {
			this._style.visibility = "visible";
		} else {
			this._style.visibility = "hidden";
		}
		this.viz = val;
		return this.viz;
	}
	,get_visible: function() {
		if(this.viz == null) {
			this.viz = true;
		}
		return this.viz;
	}
	,set_fill: function(c) {
		this._bgColor = c;
		this._style.backgroundColor = c;
		return c;
	}
	,get_fill: function() {
		return this._bgColor;
	}
	,set_height: function(val) {
		this._height = val;
		this._style.paddingTop = val + "px";
		return val;
	}
	,get_height: function() {
		if(this._height == null || this._height < this._dom.clientHeight) {
			this._height = this._dom.clientHeight;
		}
		return this._height;
	}
	,set_width: function(val) {
		this._width = val;
		this._style.paddingLeft = val + "px";
		return val;
	}
	,get_width: function() {
		if(this._width == null || this._width < this._dom.clientWidth) {
			this._width = this._dom.clientWidth;
		}
		return this._width;
	}
	,set_y: function(val) {
		this._y = val;
		this._style.top = val + "px";
		return val;
	}
	,get_y: function() {
		return this._y;
	}
	,set_x: function(val) {
		this._x = val;
		this._style.left = val + "px";
		return val;
	}
	,get_x: function() {
		return this._x;
	}
	,set_parent: function(mc) {
		this._parent = mc;
		return mc;
	}
	,get_parent: function() {
		return this._parent;
	}
	,__class__: core_ImageDiv
};
var core_ImageLoader = function(imageNames,loaded_) {
	this.images = new haxe_ds_StringMap();
	this.loaded = loaded_;
	this.count = imageNames.length;
	var _g = 0;
	while(_g < imageNames.length) {
		var name = imageNames[_g];
		++_g;
		this.load(name);
	}
};
core_ImageLoader.__name__ = true;
core_ImageLoader.prototype = {
	load: function(img) {
		var image = window.document.createElement("img");
		var imgStyle = image.style;
		imgStyle.left = "0px";
		imgStyle.top = "0px";
		imgStyle.paddingLeft = "0px";
		imgStyle.paddingTop = "0px";
		var f = $bind(this,this.store);
		var a1 = image;
		var a2 = img.split("/").pop();
		image.onload = function(e) {
			f(a1,a2,e);
		};
		imgStyle.position = "absolute";
		image.src = img;
	}
	,store: function(image,name,e) {
		this.count--;
		console.log("store " + name + " " + this.count);
		var _this = this.images;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,image);
		} else {
			_this.h[name] = image;
		}
		if(this.count == 0) {
			this.loaded();
		}
	}
	,__class__: core_ImageLoader
};
var core_SetupCanvas = function(wid,hi) {
	if(hi == null) {
		hi = 768;
	}
	if(wid == null) {
		wid = 1024;
	}
	this.canvas = window.document.createElement("canvas");
	this.dom = this.canvas;
	this.body = window.document.body;
	this.surface = this.canvas.getContext("2d",null);
	this.style = this.dom.style;
	this.canvas.width = wid;
	this.canvas.height = hi;
	this.style.paddingLeft = "0px";
	this.style.paddingTop = "0px";
	this.style.left = Std.string(0 + "px");
	this.style.top = Std.string(0 + "px");
	this.style.position = "absolute";
	this.image = this.dom;
};
core_SetupCanvas.__name__ = true;
core_SetupCanvas.prototype = {
	__class__: core_SetupCanvas
};
var core_BrowserType = { __ename__ : true, __constructs__ : ["Chrome","Safari","WebKitOther","FireFox","Opera","IE"] };
core_BrowserType.Chrome = ["Chrome",0];
core_BrowserType.Chrome.__enum__ = core_BrowserType;
core_BrowserType.Safari = ["Safari",1];
core_BrowserType.Safari.__enum__ = core_BrowserType;
core_BrowserType.WebKitOther = ["WebKitOther",2];
core_BrowserType.WebKitOther.__enum__ = core_BrowserType;
core_BrowserType.FireFox = ["FireFox",3];
core_BrowserType.FireFox.__enum__ = core_BrowserType;
core_BrowserType.Opera = ["Opera",4];
core_BrowserType.Opera.__enum__ = core_BrowserType;
core_BrowserType.IE = ["IE",5];
core_BrowserType.IE.__enum__ = core_BrowserType;
var core_WebBrowser = function() { };
core_WebBrowser.__name__ = true;
core_WebBrowser.get_hasCanvas2d = function() {
	if(core_WebBrowser._hasCanvas2d == null) {
		core_WebBrowser.set_hasCanvas2d();
	}
	return core_WebBrowser._hasCanvas2d;
};
core_WebBrowser.set_hasCanvas2d = function() {
	if(($_=window.document.createElement("canvas"),$bind($_,$_.getContext)) == null) {
		core_WebBrowser._hasCanvas2d = false;
	} else {
		core_WebBrowser._hasCanvas2d = true;
	}
};
core_WebBrowser.get_browserType = function() {
	if(core_WebBrowser._browserType == null) {
		core_WebBrowser.set_browserType(window.navigator.userAgent);
	}
	return core_WebBrowser._browserType;
};
core_WebBrowser.traceAgent = function() {
	core_WebBrowser.get_browserType();
	console.log(core_WebBrowser._userAgent);
};
core_WebBrowser.set_browserType = function(agent) {
	core_WebBrowser._userAgent = agent;
	if(new EReg("WebKit","").match(agent)) {
		if(new EReg("Chrome","").match(agent)) {
			core_WebBrowser._browserType = core_BrowserType.Chrome;
		} else if(new EReg("Safari","").match(agent)) {
			core_WebBrowser._browserType = core_BrowserType.Safari;
		} else {
			core_WebBrowser._browserType = core_BrowserType.Opera;
		}
	} else if(new EReg("Opera","").match(agent)) {
		core_WebBrowser._browserType = core_BrowserType.Opera;
	} else if(new EReg("Mozilla","").match(agent)) {
		var isIE = typeof document!='undefined' && document.all != null && typeof window!='undefined' && window.opera == null;
		if(isIE) {
			core_WebBrowser._browserType = core_BrowserType.IE;
		} else {
			core_WebBrowser._browserType = core_BrowserType.FireFox;
		}
	} else {
		core_WebBrowser._browserType = core_BrowserType.IE;
	}
	return core_WebBrowser._browserType;
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,__class__: haxe_ds_StringMap
};
var jigsawx_JigsawMagicNumbers = function() { };
jigsawx_JigsawMagicNumbers.__name__ = true;
var jigsawx_Compass = { __ename__ : true, __constructs__ : ["NORTH","SOUTH","EAST","WEST"] };
jigsawx_Compass.NORTH = ["NORTH",0];
jigsawx_Compass.NORTH.__enum__ = jigsawx_Compass;
jigsawx_Compass.SOUTH = ["SOUTH",1];
jigsawx_Compass.SOUTH.__enum__ = jigsawx_Compass;
jigsawx_Compass.EAST = ["EAST",2];
jigsawx_Compass.EAST.__enum__ = jigsawx_Compass;
jigsawx_Compass.WEST = ["WEST",3];
jigsawx_Compass.WEST.__enum__ = jigsawx_Compass;
var jigsawx_JigsawPiece = function(xy_,row,col,lt,rt,rb,lb,sideData_) {
	this.enabled = true;
	this.xy = new jigsawx_math_Vec2(xy_.x,xy_.y);
	this.sideData = sideData_;
	this.points = [];
	this.stepAngle = 6.66666666666666696 * Math.PI / 180;
	this.first = lt;
	if(this.sideData.north != null) {
		this.createVertSide(lt,rt,this.sideData.north,jigsawx_Compass.NORTH);
	}
	this.points.push(rt);
	if(this.sideData.east != null) {
		this.createHoriSide(rt,rb,this.sideData.east,jigsawx_Compass.EAST);
	}
	this.points.push(rb);
	if(this.sideData.south != null) {
		this.createVertSide(rb,lb,this.sideData.south,jigsawx_Compass.SOUTH);
	}
	this.points.push(lb);
	if(this.sideData.west != null) {
		this.createHoriSide(lb,lt,this.sideData.west,jigsawx_Compass.WEST);
	}
	this.points.push(lt);
};
jigsawx_JigsawPiece.__name__ = true;
jigsawx_JigsawPiece.prototype = {
	getPoints: function() {
		return this.points;
	}
	,getFirst: function() {
		return this.first;
	}
	,createVertSide: function(A,B,side,compass) {
		this.drawSide(A.x + (B.x - A.x) / 2 + 8. - side.squew * 16.,A.y + (B.y - A.y) / 2 + 3.33333333333333348 - side.inout * 6.66666666666666696,side,compass);
	}
	,createHoriSide: function(A,B,side,compass) {
		this.drawSide(A.x + (B.x - A.x) / 2 + 3.33333333333333348 - side.inout * 6.66666666666666696,A.y + (B.y - A.y) / 2 + 8. - side.squew * 16.,side,compass);
	}
	,drawSide: function(dx,dy,sideData,compass) {
		var halfPI = Math.PI / 2;
		var dimensions = new jigsawx_math_Vec2();
		var offsetCentre = new jigsawx_math_Vec2();
		var bubble = sideData.bubble;
		var tmp;
		switch(compass[1]) {
		case 0:
			var tmp1;
			switch(bubble[1]) {
			case 0:
				tmp1 = 1;
				break;
			case 1:
				tmp1 = -1;
				break;
			}
			tmp = new jigsawx_math_Vec2(dx,dy + 6 * tmp1);
			break;
		case 1:
			var tmp2;
			switch(bubble[1]) {
			case 0:
				tmp2 = 1;
				break;
			case 1:
				tmp2 = -1;
				break;
			}
			tmp = new jigsawx_math_Vec2(dx,dy - 6 * tmp2);
			break;
		case 2:
			var tmp3;
			switch(bubble[1]) {
			case 0:
				tmp3 = 1;
				break;
			case 1:
				tmp3 = -1;
				break;
			}
			tmp = new jigsawx_math_Vec2(dx - 6 * tmp3,dy);
			break;
		case 3:
			var tmp4;
			switch(bubble[1]) {
			case 0:
				tmp4 = 1;
				break;
			case 1:
				tmp4 = -1;
				break;
			}
			tmp = new jigsawx_math_Vec2(dx + 6 * tmp4,dy);
			break;
		}
		this.centre = tmp;
		this.curveBuilder = new jigsawx_OpenEllipse();
		this.curveBuilder.centre = this.centre;
		dimensions.x = (1 + (0.5 - sideData.centreWide) / 2) * 7.5;
		dimensions.y = (1 + (0.5 - sideData.centreHi) / 2) * 7.5;
		this.curveBuilder.dimensions = dimensions;
		this.curveBuilder.beginAngle = Math.PI / 8;
		this.curveBuilder.finishAngle = -Math.PI / 8;
		this.curveBuilder.stepAngle = this.stepAngle;
		var tmp5;
		switch(bubble[1]) {
		case 0:
			tmp5 = 0;
			break;
		case 1:
			tmp5 = Math.PI;
			break;
		}
		this.curveBuilder.rotation = tmp5;
		switch(compass[1]) {
		case 0:
			break;
		case 1:
			this.curveBuilder.rotation += Math.PI;
			break;
		case 2:
			this.curveBuilder.rotation += halfPI;
			break;
		case 3:
			this.curveBuilder.rotation += 3 * halfPI;
			break;
		}
		var secondPoints = this.curveBuilder.getRenderList();
		if(bubble == jigsawx_Bubble.IN) {
			secondPoints.reverse();
		}
		var theta = this.curveBuilder.beginAngle - this.curveBuilder.finishAngle + Math.PI;
		var cosTheta = Math.cos(theta);
		var sinTheta = Math.sin(theta);
		var hyp = this.curveBuilder.getBeginRadius();
		dimensions.x = (1 + (0.5 - sideData.leftWide) / 2) * 4.;
		dimensions.y = (1 + (0.5 - sideData.leftHi) / 2) * 2.4444444444444442;
		this.curveBuilder.dimensions = dimensions;
		this.curveBuilder.beginAngle = halfPI;
		this.curveBuilder.finishAngle = -halfPI;
		this.curveBuilder.stepAngle = this.stepAngle;
		var tmp6;
		switch(bubble[1]) {
		case 0:
			tmp6 = 0;
			break;
		case 1:
			tmp6 = halfPI;
			break;
		}
		this.curveBuilder.rotation = theta + tmp6;
		switch(compass[1]) {
		case 0:
			break;
		case 1:
			this.curveBuilder.rotation += Math.PI;
			break;
		case 2:
			this.curveBuilder.rotation += halfPI;
			break;
		case 3:
			this.curveBuilder.rotation += 3 * halfPI;
			break;
		}
		var hypLeft = hyp + this.curveBuilder.dimensions.x;
		switch(compass[1]) {
		case 0:
			offsetCentre.x = this.centre.x + hypLeft * cosTheta;
			var tmp7;
			switch(bubble[1]) {
			case 0:
				tmp7 = hypLeft * sinTheta;
				break;
			case 1:
				tmp7 = -hypLeft * sinTheta;
				break;
			}
			offsetCentre.y = this.centre.y + tmp7;
			break;
		case 1:
			offsetCentre.x = this.centre.x - hypLeft * cosTheta;
			var tmp8;
			switch(bubble[1]) {
			case 0:
				tmp8 = hypLeft * sinTheta;
				break;
			case 1:
				tmp8 = -hypLeft * sinTheta;
				break;
			}
			offsetCentre.y = this.centre.y - tmp8;
			break;
		case 2:
			var tmp9;
			switch(bubble[1]) {
			case 0:
				tmp9 = -hypLeft * cosTheta;
				break;
			case 1:
				tmp9 = hypLeft * cosTheta;
				break;
			}
			offsetCentre.x = this.centre.x + tmp9;
			offsetCentre.y = this.centre.y + hypLeft * sinTheta;
			break;
		case 3:
			var tmp10;
			switch(bubble[1]) {
			case 0:
				tmp10 = hypLeft * cosTheta;
				break;
			case 1:
				tmp10 = -hypLeft * cosTheta;
				break;
			}
			offsetCentre.x = this.centre.x + tmp10;
			offsetCentre.y = this.centre.y - hypLeft * sinTheta;
			break;
		}
		this.curveBuilder.centre = offsetCentre;
		var startPoint = this.curveBuilder.getBegin();
		var firstPoints = this.curveBuilder.getRenderList();
		if(sideData.bubble == jigsawx_Bubble.OUT) {
			firstPoints.reverse();
		}
		firstPoints.pop();
		firstPoints.pop();
		secondPoints.shift();
		secondPoints.shift();
		secondPoints.shift();
		this.points = this.points.concat(firstPoints.concat(secondPoints));
		dimensions.x = (1 + (0.5 - sideData.rightWide) / 2) * 4.;
		dimensions.y = (1 + (0.5 - sideData.rightHi) / 2) * 2.4444444444444442;
		this.curveBuilder.dimensions = dimensions;
		this.curveBuilder.beginAngle = halfPI;
		this.curveBuilder.finishAngle = -halfPI;
		this.curveBuilder.stepAngle = this.stepAngle;
		var tmp11;
		switch(bubble[1]) {
		case 0:
			tmp11 = -halfPI;
			break;
		case 1:
			tmp11 = Math.PI;
			break;
		}
		this.curveBuilder.rotation = theta + tmp11;
		switch(compass[1]) {
		case 0:
			break;
		case 1:
			this.curveBuilder.rotation += Math.PI;
			break;
		case 2:
			this.curveBuilder.rotation += halfPI;
			break;
		case 3:
			this.curveBuilder.rotation += 3 * halfPI;
			break;
		}
		var hypRight = hyp + this.curveBuilder.dimensions.x;
		switch(compass[1]) {
		case 0:
			offsetCentre.x = this.centre.x - hypRight * cosTheta;
			var tmp12;
			switch(bubble[1]) {
			case 0:
				tmp12 = hypRight * sinTheta;
				break;
			case 1:
				tmp12 = -hypRight * sinTheta;
				break;
			}
			offsetCentre.y = this.centre.y + tmp12;
			break;
		case 1:
			offsetCentre.x = this.centre.x + hypRight * cosTheta;
			var tmp13;
			switch(bubble[1]) {
			case 0:
				tmp13 = hypRight * sinTheta;
				break;
			case 1:
				tmp13 = -hypRight * sinTheta;
				break;
			}
			offsetCentre.y = this.centre.y - tmp13;
			break;
		case 2:
			var tmp14;
			switch(bubble[1]) {
			case 0:
				tmp14 = -hypLeft * cosTheta;
				break;
			case 1:
				tmp14 = hypLeft * cosTheta;
				break;
			}
			offsetCentre.x = this.centre.x + tmp14;
			offsetCentre.y = this.centre.y - hypLeft * sinTheta;
			break;
		case 3:
			var tmp15;
			switch(bubble[1]) {
			case 0:
				tmp15 = hypLeft * cosTheta;
				break;
			case 1:
				tmp15 = -hypLeft * cosTheta;
				break;
			}
			offsetCentre.x = this.centre.x + tmp15;
			offsetCentre.y = this.centre.y + hypLeft * sinTheta;
			break;
		}
		this.curveBuilder.centre = offsetCentre;
		var thirdPoints = this.curveBuilder.getRenderList();
		if(bubble == jigsawx_Bubble.OUT) {
			thirdPoints.reverse();
		}
		thirdPoints.shift();
		thirdPoints.shift();
		this.points.pop();
		this.points.pop();
		this.points.pop();
		this.points = this.points.concat(thirdPoints);
	}
	,__class__: jigsawx_JigsawPiece
};
var jigsawx_Bubble = { __ename__ : true, __constructs__ : ["IN","OUT"] };
jigsawx_Bubble.IN = ["IN",0];
jigsawx_Bubble.IN.__enum__ = jigsawx_Bubble;
jigsawx_Bubble.OUT = ["OUT",1];
jigsawx_Bubble.OUT.__enum__ = jigsawx_Bubble;
var jigsawx_JigsawSideData = function() {
};
jigsawx_JigsawSideData.__name__ = true;
jigsawx_JigsawSideData.halfPieceData = function() {
	return { north : null, east : jigsawx_JigsawSideData.create(), south : jigsawx_JigsawSideData.create(), west : null};
};
jigsawx_JigsawSideData.createBubble = function() {
	if(Math.round(Math.random()) == 1) {
		return jigsawx_Bubble.IN;
	} else {
		return jigsawx_Bubble.OUT;
	}
};
jigsawx_JigsawSideData.swapBubble = function(bubble) {
	if(bubble == jigsawx_Bubble.OUT) {
		return jigsawx_Bubble.IN;
	}
	if(bubble == jigsawx_Bubble.IN) {
		return jigsawx_Bubble.OUT;
	}
	return null;
};
jigsawx_JigsawSideData.reflect = function(j) {
	var side = new jigsawx_JigsawSideData();
	side.bubble = jigsawx_JigsawSideData.swapBubble(j.bubble);
	side.squew = j.squew;
	side.inout = j.inout;
	side.leftWide = j.rightWide;
	side.leftHi = j.rightHi;
	side.centreWide = j.centreWide;
	side.centreHi = j.centreHi;
	side.rightWide = j.leftWide;
	side.rightHi = j.leftHi;
	return side;
};
jigsawx_JigsawSideData.createSimple = function() {
	var side = new jigsawx_JigsawSideData();
	side.bubble = jigsawx_JigsawSideData.createBubble();
	side.squew = 0.5;
	side.inout = 0.5;
	side.leftWide = 0.5;
	side.leftHi = 0.5;
	side.centreWide = 0.5;
	side.centreHi = 0.5;
	side.rightWide = 0.5;
	side.rightHi = 0.5;
	return side;
};
jigsawx_JigsawSideData.create = function() {
	var side = new jigsawx_JigsawSideData();
	side.bubble = jigsawx_JigsawSideData.createBubble();
	side.squew = Math.random();
	side.inout = Math.random();
	side.leftWide = Math.random();
	side.leftHi = Math.random();
	side.centreWide = Math.random();
	side.centreHi = Math.random();
	side.rightWide = Math.random();
	side.rightHi = Math.random();
	return side;
};
jigsawx_JigsawSideData.prototype = {
	__class__: jigsawx_JigsawSideData
};
var jigsawx_Jigsawx = function(dx_,dy_,rows_,cols_) {
	this.pieces = [];
	this.jigs = [];
	this.sides = [];
	this.dx = dx_;
	this.dy = dy_;
	this.rows = rows_;
	this.cols = cols_;
	var xy = new jigsawx_math_Vec2(20,20);
	var lt = new jigsawx_math_Vec2(20,20);
	var rt = new jigsawx_math_Vec2(20 + this.dx,20);
	var rb = new jigsawx_math_Vec2(20 + this.dx,this.dy + 20);
	var lb = new jigsawx_math_Vec2(20,this.dy + 20);
	this.length = 0;
	var last;
	var _g1 = 0;
	var _g = this.rows;
	while(_g1 < _g) {
		var row = _g1++;
		last = { north : null, east : null, south : null, west : null};
		this.sides.push([]);
		var _g3 = 0;
		var _g2 = this.cols;
		while(_g3 < _g2) {
			var col = _g3++;
			var jigsawPiece = jigsawx_JigsawSideData.halfPieceData();
			if(last.east != null) {
				jigsawPiece.west = jigsawx_JigsawSideData.reflect(last.east);
			}
			if(col == this.cols - 1) {
				jigsawPiece.east = null;
			}
			this.sides[row][col] = jigsawPiece;
			last = jigsawPiece;
			this.length++;
		}
	}
	var _g11 = 0;
	var _g4 = this.cols;
	while(_g11 < _g4) {
		var col1 = _g11++;
		last = { north : null, east : null, south : null, west : null};
		var _g31 = 0;
		var _g21 = this.rows;
		while(_g31 < _g21) {
			var row1 = _g31++;
			var jigsawPiece1 = this.sides[row1][col1];
			if(last.south != null) {
				jigsawPiece1.north = jigsawx_JigsawSideData.reflect(last.south);
			}
			if(row1 == this.rows - 1) {
				jigsawPiece1.south = null;
			}
			last = jigsawPiece1;
		}
	}
	var jig;
	var _g12 = 0;
	var _g5 = this.rows;
	while(_g12 < _g5) {
		var row2 = _g12++;
		this.pieces.push([]);
		var _g32 = 0;
		var _g22 = this.cols;
		while(_g32 < _g22) {
			var col2 = _g32++;
			jig = new jigsawx_JigsawPiece(xy,row2,col2,lt,rt,rb,lb,this.sides[row2][col2]);
			this.pieces[row2][col2] = jig;
			this.jigs.push(jig);
			xy.x += this.dx;
		}
		xy.x = 20;
		xy.y += this.dy;
	}
};
jigsawx_Jigsawx.__name__ = true;
jigsawx_Jigsawx.prototype = {
	__class__: jigsawx_Jigsawx
};
var jigsawx_OpenEllipse = function() {
};
jigsawx_OpenEllipse.__name__ = true;
jigsawx_OpenEllipse.prototype = {
	getBegin: function() {
		return this.createPoint(this.centre,this.dimensions,this.beginAngle);
	}
	,getFinish: function() {
		return this.createPoint(this.centre,this.dimensions,this.finishAngle);
	}
	,getBeginRadius: function() {
		return this.pointDistance(this.centre,this.getBegin());
	}
	,getFinishRadius: function() {
		return this.pointDistance(this.centre,this.getFinish());
	}
	,pointDistance: function(A,B) {
		var dx = A.x - B.x;
		var dy = A.y - B.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,setUp: function() {
		this.circleIter = jigsawx_ds_CircleIter.pi2pi(this.beginAngle,this.finishAngle,this.stepAngle);
	}
	,getRenderList: function() {
		this._points = [];
		if(this.circleIter == null) {
			this.setUp();
		}
		this._points.push(this.createPoint(this.centre,this.dimensions,this.beginAngle));
		var theta = jigsawx_ds_CircleIter.pi2pi(this.beginAngle,this.finishAngle,this.stepAngle).reset();
		while(theta.hasNext()) {
			var theta1 = theta.next();
			this._points.push(this.createPoint(this.centre,this.dimensions,theta1));
		}
		return this._points;
	}
	,createPoint: function(centre,dimensions,theta) {
		var offSetA = 3 * Math.PI / 2 - this.rotation;
		var dx = dimensions.x * Math.sin(theta);
		var dy = -dimensions.y * Math.cos(theta);
		var dxNew = centre.x - dx * Math.sin(offSetA) + dy * Math.cos(offSetA);
		var dyNew = centre.y - dx * Math.cos(offSetA) - dy * Math.sin(offSetA);
		return new jigsawx_math_Vec2(dxNew,dyNew);
	}
	,__class__: jigsawx_OpenEllipse
};
var jigsawx_ds_Sign = { __ename__ : true, __constructs__ : ["UP","DOWN"] };
jigsawx_ds_Sign.UP = ["UP",0];
jigsawx_ds_Sign.UP.__enum__ = jigsawx_ds_Sign;
jigsawx_ds_Sign.DOWN = ["DOWN",1];
jigsawx_ds_Sign.DOWN.__enum__ = jigsawx_ds_Sign;
var jigsawx_ds_CircleIter = function(begin_,fin_,step_,min_,max_) {
	this.begin = begin_;
	this.current = this.begin;
	this.fin = fin_;
	this.step = step_;
	this.min = min_;
	this.max = max_;
	this.onDirection = this.step > 0 ? jigsawx_ds_Sign.UP : jigsawx_ds_Sign.DOWN;
};
jigsawx_ds_CircleIter.__name__ = true;
jigsawx_ds_CircleIter.pi2 = function(begin_,fin_,step_) {
	return new jigsawx_ds_CircleIter(begin_,fin_,step_,0,2 * Math.PI);
};
jigsawx_ds_CircleIter.pi2pi = function(begin_,fin_,step_) {
	return new jigsawx_ds_CircleIter(begin_,fin_,step_,-Math.PI,Math.PI);
};
jigsawx_ds_CircleIter.prototype = {
	reset: function() {
		this.current = this.begin;
		return this;
	}
	,hasNext: function() {
		var _g = this.onDirection;
		switch(_g[1]) {
		case 0:
			if(this.current < this.fin && this.current + this.step > this.fin || this.current == this.fin) {
				return false;
			} else {
				return true;
			}
			break;
		case 1:
			if(this.current > this.fin && this.current - this.step < this.fin || this.current == this.fin) {
				return false;
			} else {
				return true;
			}
			break;
		}
	}
	,next: function() {
		this.current += this.step;
		var _g = this.onDirection;
		switch(_g[1]) {
		case 0:
			if(this.current > this.max) {
				this.current = this.min + this.current - this.max;
			}
			break;
		case 1:
			if(this.current < this.min) {
				this.current = this.max + this.current - this.min;
			}
			break;
		}
		if(!this.hasNext()) {
			return this.fin;
		}
		return this.current;
	}
	,__class__: jigsawx_ds_CircleIter
};
var jigsawx_math_Vec2 = function(x_,y_) {
	if(y_ == null) {
		y_ = .0;
	}
	if(x_ == null) {
		x_ = .0;
	}
	this.x = x_;
	this.y = y_;
};
jigsawx_math_Vec2.__name__ = true;
jigsawx_math_Vec2.prototype = {
	__class__: jigsawx_math_Vec2
};
var jigsawxtargets_hxjs_JigsawDivtastic = function() {
	this.holder = new core_DisplayDiv();
	this.holder.set_x(0);
	this.holder.set_y(0);
	this.holder.set_width(520);
	this.holder.set_height(260);
	this.count = 0;
	core_GlobalDiv.addChild(this,this.holder);
	this.createVisuals();
	this.createHit();
	this.loader = new core_ImageLoader(["tablecloth.jpg"],$bind(this,this.onLoaded));
};
jigsawxtargets_hxjs_JigsawDivtastic.__name__ = true;
jigsawxtargets_hxjs_JigsawDivtastic.main = function() {
	new jigsawxtargets_hxjs_JigsawDivtastic();
};
jigsawxtargets_hxjs_JigsawDivtastic.prototype = {
	onLoaded: function() {
		var count = 0;
		var images = this.loader.images;
		var tablecloth = __map_reserved["tablecloth.jpg"] != null ? images.getReserved("tablecloth.jpg") : images.h["tablecloth.jpg"];
		var xy = new jigsawx_math_Vec2(20,20);
		var _g1 = 0;
		var _g = this.rows;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = 0;
			var _g2 = this.cols;
			while(_g3 < _g2) {
				var col = _g3++;
				this.surfaces[count].drawImage(tablecloth,32 - xy.x,42 - xy.y,tablecloth.width * 0.81,tablecloth.height * 0.81);
				xy.x += this.wid;
				++count;
			}
			xy.x = 20;
			xy.y += this.hi;
		}
	}
	,createHit: function() {
		this.hit = new core_DisplayDiv();
		this.hit.set_x(0);
		this.hit.set_y(0);
		this.hit.set_width(1000);
		this.hit.set_height(1000);
		this.hit.getStyle().cursor = "pointer";
		this.hit.getStyle().zIndex = "1000000000";
		core_GlobalDiv.addChild(this,this.hit);
		this.hit.press.add($bind(this,this.checkForDrag));
	}
	,checkForDrag: function() {
		var _gthis = this;
		core_GlobalDiv.ROOT(this).onmousemove = null;
		var pos = this.hit.getGlobalMouseXY();
		var px = pos.first();
		var py = pos.last();
		var distance = 1000000000.;
		var closest = this.tiles[0];
		var jig = this.jigsawx.jigs[0];
		var surface = this.surfaces[0];
		var currI = 0;
		var dx;
		var dy;
		var dr2;
		var vXY;
		var _g1 = 0;
		var _g = this.tiles.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.jigsawx.jigs[i].enabled) {
				dx = this.tiles[i].get_x() - px;
				dy = this.tiles[i].get_y() - py;
				dr2 = dx * dx + dy * dy;
				if(dr2 < distance) {
					closest = this.tiles[i];
					jig = this.jigsawx.jigs[i];
					surface = this.surfaces[i];
					distance = dr2;
					currI = i;
				}
			}
		}
		var wid_ = this.wid / 2;
		var hi_ = this.hi / 2;
		if(distance < this.wid * this.hi) {
			closest.getStyle().zIndex = Std.string(this.depth++);
			core_GlobalDiv.ROOT(this).onmouseup = function(e) {
				var em = e;
				if(closest.get_alpha() != 1) {
					closest.set_x(em.clientX - wid_ / 2);
					closest.set_y(em.clientY - hi_ / 2);
					closest.set_alpha(0.74);
				}
				if(Math.abs(jig.xy.x - closest.get_x()) < (wid_ + hi_) / 6 && Math.abs(jig.xy.y - closest.get_y()) < (wid_ + hi_) / 6) {
					closest.set_x(jig.xy.x);
					closest.set_y(jig.xy.y);
					closest.set_alpha(1);
					jig.enabled = false;
				}
				core_GlobalDiv.ROOT(_gthis).onmousemove = null;
			};
			core_GlobalDiv.ROOT(this).onmousemove = function(e1) {
				var em1 = e1;
				if(closest.get_alpha() != 1) {
					closest.set_x(em1.clientX - wid_ / 2);
					closest.set_y(em1.clientY - hi_ / 2);
					closest.set_alpha(0.87);
				}
			};
		}
	}
	,drawEdge: function(surface,jig,c) {
		surface.strokeStyle = c;
		surface.lineWidth = 2;
		surface.beginPath();
		var first = jig.getFirst();
		surface.moveTo(first.x + 3,first.y + 3);
		var _g = 0;
		var _g1 = jig.getPoints();
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			surface.lineTo(v.x + 3,v.y + 3);
		}
		surface.stroke();
		surface.closePath();
		surface.clip();
	}
	,visualDisplay: function() {
		this.visualSource = new core_DisplayDiv("big_buck_bunny.webm");
		this.visualSource.set_x(0);
		this.visualSource.set_y(0);
		this.visualSource.set_width(10);
		this.visualSource.set_height(10);
		this.holder.addChild(this.visualSource);
		this.visualSource.play();
		this.visualSource.getStyle().position = "absolute";
		this.atimer = new haxe_Timer(40);
		this.atimer.run = $bind(this,this.copyAcross);
	}
	,createVisuals: function() {
		var sp;
		var canvasSp;
		var surface;
		var first;
		this.surfaces = [];
		this.tiles = [];
		this.rows = 3;
		this.cols = 4;
		this.wid = 70;
		this.hi = 70;
		this.jigsawx = new jigsawx_Jigsawx(this.wid,this.hi,this.rows,this.cols);
		this.depth = 0;
		var _g = 0;
		var _g1 = this.jigsawx.jigs;
		while(_g < _g1.length) {
			var jig = _g1[_g];
			++_g;
			sp = new core_DisplayDiv();
			this.holder.addChild(sp);
			this.tiles.push(sp);
			sp.set_x(jig.xy.x);
			sp.set_y(jig.xy.y);
			sp.set_width(0);
			sp.set_height(0);
			canvasSp = new core_DisplayDiv("canvas");
			canvasSp.set_x(-this.wid / 2 + -5);
			canvasSp.set_y(-this.hi / 2 + -5);
			surface = canvasSp.get_twoD();
			sp.getStyle().zIndex = Std.string(this.depth++);
			sp.addChild(canvasSp);
			if(Math.random() * 5 > 2) {
				sp.set_x(475. - Math.random() * 170);
				sp.set_y(130. - Math.random() * 255 / 2 + 15);
				sp.set_alpha(0.74);
				this.drawEdge(surface,jig,"white");
			} else {
				jig.enabled = false;
				this.drawEdge(surface,jig,"white");
			}
			this.surfaces.push(surface);
		}
	}
	,copyAcross: function() {
		this.count++;
		var xy = new jigsawx_math_Vec2(20,20);
		console.log(this.visualSource.getInstance());
		var image = this.visualSource.getInstance();
		var count = 0;
		var _g1 = 0;
		var _g = this.rows;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = 0;
			var _g2 = this.cols;
			while(_g3 < _g2) {
				var col = _g3++;
				this.surfaces[count].drawImage(image,-xy.x,-xy.y);
				xy.x += this.wid;
				++count;
			}
			xy.x = 20;
			xy.y += this.hi;
		}
	}
	,__class__: jigsawxtargets_hxjs_JigsawDivtastic
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var zpartanlite_DispatchTo = function() {
	this.disableKill();
};
zpartanlite_DispatchTo.__name__ = true;
zpartanlite_DispatchTo.prototype = {
	enableKill: function() {
		this.kill = $bind(this,this.killAll);
	}
	,disableKill: function() {
		this.kill = function() {
			console.log("Can't kill other listeners unless enableKill");
		};
	}
	,get_length: function() {
		if(this.func == null) {
			if(this.func0 != null) {
				return 1;
			} else {
				return null;
			}
		}
		return this.func.length;
	}
	,add: function(f_,once,amount) {
		if(this.get_length() == null) {
			this.func0 = f_;
			if(this.tellEnabled != null) {
				this.tellEnabled();
			}
			if(once != null) {
				if(once == true) {
					this.times0 = 1;
				} else {
					this.times0 = -1;
				}
			} else if(amount != null) {
				this.times0 = amount;
			} else {
				this.times0 = -1;
			}
			return;
		} else if(this.func == null) {
			this.func = [];
			this.times = [];
			this.func.push(this.func0);
			this.times.push(this.times0);
			this.func0 = null;
			this.times0 = null;
		}
		this.func.push(f_);
		if(once != null) {
			if(once == true) {
				this.times.push(1);
			} else {
				this.times.push(-1);
			}
		} else if(amount != null) {
			this.times.push(amount);
		} else {
			this.times.push(-1);
		}
	}
	,swap: function(current_,new_) {
		this.remove(current_);
		this.add(new_);
	}
	,remove: function(f_) {
		if(this.get_length() == null) {
			return;
		}
		if(this.get_length() == 1) {
			if(Reflect.compareMethods(f_,this.func0)) {
				this.func0 = null;
				this.times0 = null;
				if(this.tellDisabled != null) {
					this.tellDisabled();
				}
			}
			return;
		}
		var _g1 = 0;
		var _g = this.func.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(Reflect.compareMethods(this.func[i],f_)) {
				this.func.splice(i,1);
				this.times.splice(i,1);
			}
		}
		if(this.get_length() == 1) {
			this.func0 = this.func[0];
			this.times0 = this.times[0];
			this.func = null;
			this.times0 = null;
		}
	}
	,killAll: function() {
		if(this.get_length() == 1) {
			this.func0 = null;
			this.times0 = null;
			return;
		}
		var _g1 = 0;
		var _g = this.func.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.func.splice(i,1);
			this.times.splice(i,1);
		}
		this.func = [];
		this.times = [];
	}
	,dispatch: function() {
		if(this.get_length() == null) {
			return;
		}
		var count;
		if(this.get_length() == 1) {
			this.func0();
			if(this.times0 != -1) {
				this.times0--;
				if(this.times0 == 0) {
					this.remove(this.func0);
				}
			}
			return;
		}
		var _g1 = 0;
		var _g = this.func.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.func[i]();
			count = this.times[i];
			if(count != -1) {
				this.times[i] = --count;
				if(count == 0) {
					this.remove(this.func[i]);
				}
			}
		}
	}
	,__class__: zpartanlite_DispatchTo
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
core_GlobalDiv._root = window.document;
jigsawx_JigsawMagicNumbers.dMore = 16.;
jigsawx_JigsawMagicNumbers.dinout = 6.66666666666666696;
jigsawx_JigsawMagicNumbers.ellipseSmallx = 4.;
jigsawx_JigsawMagicNumbers.ellipseSmally = 2.4444444444444442;
jigsawx_JigsawMagicNumbers.ellipseLargex = 7.5;
jigsawx_JigsawMagicNumbers.ellipseLargey = 6.;
jigsawx_JigsawMagicNumbers.stepSize = 6.66666666666666696;
jigsawxtargets_hxjs_JigsawDivtastic.videoSrc = "big_buck_bunny.webm";
jigsawxtargets_hxjs_JigsawDivtastic.imageSrc = "tablecloth.jpg";
js_Boot.__toStr = ({ }).toString;
jigsawxtargets_hxjs_JigsawDivtastic.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
